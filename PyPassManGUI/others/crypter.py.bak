encryption_key = 'passmanager_files\\encryption.key'

# Char table with all the ascii printable chars
normal_char_table = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e',
                     'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
                     'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I',
                     'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',
                     'Y', 'Z', '!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-',
                     '.', '/', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`',
                     '{', '|', '}', '~', ' ']

# Reads the key from file and assigns all the values
with open(encryption_key, 'r', encoding='UTF=8') as f:
    key = f.read()

key = key.split('///...|')
encoded_char_table = []
encoded_char_table[:0] = key[0]

f_encryptionlayer_key = key[1]
e_encryptionlayer_key = key[2]
s_encryptionlayer_key = key[3]


# First encode layer (changes the normal char to an encoded one and shifts each one by +1 and -1
#   one after another based on their index on the ascii table
def temp_encode1(s):
    temp = 1
    encoded_string = ''
    for char in s:
        encoded_char = encoded_char_table[normal_char_table.index(char)]
        if encoded_char != ' ' and encoded_char != '~':
            if temp == 1:
                index = ord(encoded_char)
                encoded_char = chr(index + 1)
                temp = 2
            elif temp == 2:
                index = ord(encoded_char)
                encoded_char = chr(index - 1)
                temp = 1
        encoded_string += encoded_char
    try:
        chunks, chunk_size = len(encoded_string), int(len(encoded_string) // 2.5)
        encoded_string = [encoded_string[i:i+chunk_size] for i in range(0, chunks, chunk_size)]
        chunks2, chunk_size2 = len(f_encryptionlayer_key), 8
        f_encryptlayer_key = [f_encryptionlayer_key[i:i + chunk_size2] for i in range(0, chunks2, chunk_size2)]
        encoded_string.insert(0, f_encryptlayer_key[0])
        encoded_string.insert(2, f_encryptlayer_key[1])
        e_encryptlayer_key = [e_encryptionlayer_key[i:i + chunk_size2] for i in range(0, chunks2, chunk_size2)]
        encoded_string.insert(-2, e_encryptlayer_key[0])
        encoded_string.insert(-1, e_encryptlayer_key[1])
        s_encryptlayer_key = [s_encryptionlayer_key[i:i + chunk_size2] for i in range(0, chunks2, chunk_size2)]
        encoded_string.insert(0, s_encryptlayer_key[0])
        encoded_string.insert(-1, s_encryptlayer_key[1])
    except:
        print('Inputted text is less than 4 chars which is not acceptable')

    encoded_string = ''.join(encoded_string)

    return encoded_string


# Second encode layer (used for encoding the encoded char for extra security)
def temp_encode2(s):
    temp = 1
    encoded_string = ''
    for char in s:
        encoded_char = encoded_char_table[normal_char_table.index(char)]
        encoded_string += encoded_char

    return encoded_string


# Main encode function (encodes the file with the first layer once and 15 times with the second,
#   so if the key is found but not the program will be hard to crack it)
def encode(s):
    s = temp_encode1(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)
    s = temp_encode2(s)

    return s


# First decode layer (basically reverses the process that the firsts encode layer does)
def temp_decode1(s):
    try:
        chunks2, chunk_size2 = len(f_encryptionlayer_key), 8
        s_encryptlayer_key = [s_encryptionlayer_key[i:i + chunk_size2] for i in range(0, chunks2, chunk_size2)]
        s = s.replace(s_encryptlayer_key[0], '')
        s = s.replace(s_encryptlayer_key[1], '')

        e_encryptlayer_key = [e_encryptionlayer_key[i:i + chunk_size2] for i in range(0, chunks2, chunk_size2)]
        s = s.replace(e_encryptlayer_key[0], '')
        s = s.replace(e_encryptlayer_key[1], '')

        f_encryptlayer_key = [f_encryptionlayer_key[i:i + chunk_size2] for i in range(0, chunks2, chunk_size2)]
        s = s.replace(f_encryptlayer_key[0], '')
        s = s.replace(f_encryptlayer_key[1], '')
    except:
        print('Inputted text is less than 4 chars which is not acceptable')

    decoded_string = ''
    temp = 1
    for char in s:
        if char != ' ' and char != '~':
            if temp == 1:
                index = ord(char)
                char = chr(index - 1)
                temp = 2
            elif temp == 2:
                index = ord(char)
                char = chr(index + 1)
                temp = 1
        decoded_char = normal_char_table[encoded_char_table.index(char)]
        decoded_string += decoded_char

    return decoded_string


# Second decode layer (basically reverses what the second encode layer does)
def temp_decode2(s):
    decoded_string = ''
    temp = 1
    for char in s:
        decoded_char = normal_char_table[encoded_char_table.index(char)]
        decoded_string += decoded_char

    return decoded_string


# Main decode function (same as encode but in reverse order)
def decode(s):
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode2(s)
    s = temp_decode1(s)

    return s
